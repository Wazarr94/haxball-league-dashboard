datasource db {
  provider = "postgresql"
  url      = ""
}

generator client {
  provider  = "prisma-client-py"
  interface = "sync"
  output    = "./generated/prisma"
}

model Period {
  id             BigInt        @id
  gametime       Float
  scoreRed       Int
  scoreBlue      Int
  possessionRed  Int
  possessionBlue Int
  actionZoneRed  Int
  actionZoneBlue Int
  PlayerStats    PlayerStats[]
  LeagueMatch    LeagueMatch?  @relation(fields: [leagueMatchId], references: [id])
  leagueMatchId  Int?
}

model Player {
  id         String        @id @default(cuid())
  auth       String
  conn       String
  name       String
  team       Int
  goalDetail GoalDetail[]
  stats      PlayerStats[]
}

model Goal {
  id     String       @id @default(cuid())
  time   Float
  passes Int
  detail GoalDetail[]
}

model GoalDetail {
  goal     Goal    @relation(fields: [goalId], references: [id])
  player   Player  @relation(fields: [playerId], references: [id])
  goalId   String
  playerId String
  role     Int
  own      Boolean

  @@id([goalId, playerId])
}

model PlayerStats {
  id                String @id @default(cuid())
  period            Period @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId          BigInt
  Player            Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId          String
  gametime          Float
  goals             Int
  ownGoals          Int
  assists           Int
  secondaryAssists  Int
  tertiaryAssists   Int
  shots             Int
  shotsTarget       Int
  saves             Int
  touches           Int
  kicks             Int
  interceptions     Int
  clears            Int
  duels             Int
  reboundDribbles   Int
  passesAttempted   Int
  passesSuccessful  Int
  goalsScoredTeam   Int
  goalsConcededTeam Int
  averagePosX       Float
  averagePosY       Float
  gamePosition      Int
}

model LeagueDivision {
  id      Int                   @id @default(autoincrement())
  name    String                @unique
  matches LeagueMatch[]
  teams   LeagueTeamDivisions[]
}

model LeagueTeam {
  id           Int                   @id @default(autoincrement())
  name         String                @unique
  initials     String
  players      LeaguePlayerTeams[]
  matchDetails LeagueMatchDetail[]
  divisions    LeagueTeamDivisions[]
}

model LeagueTeamDivisions {
  team             LeagueTeam     @relation(fields: [leagueTeamId], references: [id], onDelete: Cascade)
  leagueTeamId     Int
  division         LeagueDivision @relation(fields: [leagueDivisionId], references: [id], onDelete: Cascade)
  leagueDivisionId Int

  @@id([leagueTeamId, leagueDivisionId])
}

model LeaguePlayer {
  id    Int                 @id @default(autoincrement())
  name  String              @unique
  nicks String[]
  teams LeaguePlayerTeams[]
}

model LeaguePlayerTeams {
  player         LeaguePlayer @relation(fields: [leaguePlayerId], references: [id], onDelete: Cascade)
  leaguePlayerId Int
  team           LeagueTeam   @relation(fields: [leagueTeamId], references: [id], onDelete: Cascade)
  leagueTeamId   Int
  active         Boolean

  @@id([leaguePlayerId, leagueTeamId])
}

model LeagueMatch {
  id               Int                 @id
  date             DateTime
  matchday         String
  gameNumber       Int
  title            String
  LeagueDivision   LeagueDivision      @relation(fields: [leagueDivisionId], references: [id], onDelete: Cascade)
  leagueDivisionId Int
  periods          Period[]
  defwin           Int
  addRed           Int
  addBlue          Int
  replayURL        String
  detail           LeagueMatchDetail[]
}

model LeagueMatchDetail {
  match         LeagueMatch @relation(fields: [leagueMatchId], references: [id], onDelete: Cascade)
  leagueMatchId Int
  team          LeagueTeam  @relation(fields: [leagueTeamId], references: [id], onDelete: Cascade)
  leagueTeamId  Int
  home          Boolean
  startsRed     Boolean

  @@id([leagueMatchId, leagueTeamId])
}
